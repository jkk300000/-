/@version=6
strategy("아비트라지 숏", overlay=true, fill_orders_on_standard_ohlc = true, initial_capital = 1000, commission_value = 0.05)



btcSpotPrice = request.security("OKX:BTCUSDT", input.timeframe('D'), close)
btcFuturesPrice = request.security("BINANCE:BTCUSDT.P", input.timeframe('D'), close)



var float entrySpot = na
var float entryFutures = na
// log.info("entryPrice:{0}", bitgetPrice)
// log.info("entryPrice2:{0}", binanceFuturesPrice)
var float exitSpot = na
var float exitFutures = na
var float positionSizeFuture = na
var float profit = na
// black == spot, red == futures
crossOver = ta.crossover(btcFuturesPrice, close)
crossUnder = ta.crossover(btcFuturesPrice, close)

// Calculate spread (basis)
spread = btcFuturesPrice - btcSpotPrice


if (strategy.position_size > 0 and spread > 0)
    exitSpot := btcSpotPrice  // Store the daily close price at the time of exit
    exitFutures := btcFuturesPrice  // Store the daily close price at the time of exit


// Store exit prices when position is closed
if (strategy.position_size < 0 and spread < 0)
    exitSpot := btcSpotPrice  // Store the daily close price at the time of exit
    exitFutures := btcFuturesPrice  // Store the daily close price at the time of exit
    


longCondition = spread < 0
if (strategy.position_size == 0 and longCondition)
    strategy.entry("longPosition", strategy.long)
    entrySpot := btcSpotPrice
    entryFutures := btcFuturesPrice
profit :=  ((entrySpot - exitSpot) + (exitFutures - entryFutures))  - ((entrySpot * 0.0015) + (entryFutures * 0.0015))
// log.info("entryPrice:{0}", entrySpot)
// log.info("entryPrice2:{0}", entryFutures)
closeLongCondition = spread > 0 and profit > 0
if (strategy.position_size > 0 and closeLongCondition)
    strategy.close("longPosition", "종료")

 
// log.info("entrySpot:{0}", entrySpot)
// log.info("entryFutures:{0}", entryFutures)





shortCondition = spread > 0
if (strategy.position_size == 0 and shortCondition)
    strategy.entry("shortPosition", strategy.short)
    entrySpot := btcSpotPrice
    entryFutures := btcFuturesPrice
    positionSizeFuture := 1000 / entryFutures
// profit = (entrySpot - btcSpotPrice) + (entryFutures - btcFuturesPrice) > 0
// profit = (entrySpot - entryFutures) + (exitSpot - exitFutures) > 0
positionSizeAndCommition = positionSizeFuture * 0.002
profit := ((exitSpot - entrySpot) + (entryFutures - exitFutures))  - ((entrySpot * 0.0015) + (entryFutures * 0.0015))
standard = (exitSpot - entrySpot) > (entryFutures - exitFutures)
// profit := (exitSpot - entrySpot) + (entryFutures - exitFutures) 
log.info("exitSpot:{0}", exitSpot)
log.info("exitFutures:{0}", exitFutures)
closeCondition =  spread < 0 and profit > 0 
if (strategy.position_size < 0 and closeCondition)
    strategy.close("shortPosition", "숏 포지션 종료")